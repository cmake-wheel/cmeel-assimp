name: Release on GitHub & PyPI

on: [push]

jobs:
  build_wheels_macos:
    name: Build ${{ matrix.build }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["macos-latest"]
        build: ["cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "pp37-*", "pp38-*", "pp39-*"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: python -m pip install -U pip
      - run: python -m pip install cibuildwheel
      - run: touch setup.py
      - run: python -m cibuildwheel --output-dir wh
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_ARCHS_MACOS: "x86_64 universal2"
          CIBW_REPAIR_WHEEL_COMMAND: ""
      - uses: actions/upload-artifact@v3
        with:
          path: wh
  build_wheels_linux:
    name: Build ${{ matrix.build }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        arch: ["x86_64", "aarch64", "s390x"]
        build: [
          "cp37-manylinux*",
          "cp37-musllinux*",
          "cp38-manylinux*",
          "cp38-musllinux*",
          "cp39-manylinux*",
          "cp39-musllinux*",
          "cp310-manylinux*",
          "cp310-musllinux*",
          "cp311-manylinux*",
          "cp311-musllinux*",
          "pp37-*",
          "pp38-*",
          "pp39-*"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - run: python -m pip install -U pip
      - run: python -m pip install cibuildwheel
      - run: touch setup.py
      - run: python -m cibuildwheel --output-dir wh
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64"
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64"
          CIBW_MANYLINUX_S390X_IMAGE: "quay.io/pypa/manylinux2014_s390x"
          CIBW_REPAIR_WHEEL_COMMAND: ""
      - uses: actions/upload-artifact@v3
        with:
          path: wh
  release:
    needs: ["build_wheels_linux", "build_wheels_macos"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/download-artifact@v3
      #- run: python -m pip install twine
      #- run: python -m twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} artifact/cmeel_assimp*.whl
      #- run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      #- run: gh release create -t "Release ${{ env.TAG}}" ${{ env.TAG }} artifact/cmeel_assimp*.whl
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
